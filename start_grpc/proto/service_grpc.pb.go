// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactorialServiceClient is the client API for FactorialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorialServiceClient interface {
	FindFactorial(ctx context.Context, in *FindFactorialRequest, opts ...grpc.CallOption) (*FindFactorialReply, error)
}

type factorialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorialServiceClient(cc grpc.ClientConnInterface) FactorialServiceClient {
	return &factorialServiceClient{cc}
}

func (c *factorialServiceClient) FindFactorial(ctx context.Context, in *FindFactorialRequest, opts ...grpc.CallOption) (*FindFactorialReply, error) {
	out := new(FindFactorialReply)
	err := c.cc.Invoke(ctx, "/FactorialService/FindFactorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactorialServiceServer is the server API for FactorialService service.
// All implementations must embed UnimplementedFactorialServiceServer
// for forward compatibility
type FactorialServiceServer interface {
	FindFactorial(context.Context, *FindFactorialRequest) (*FindFactorialReply, error)
	mustEmbedUnimplementedFactorialServiceServer()
}

// UnimplementedFactorialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFactorialServiceServer struct {
}

func (UnimplementedFactorialServiceServer) FindFactorial(context.Context, *FindFactorialRequest) (*FindFactorialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFactorial not implemented")
}
func (UnimplementedFactorialServiceServer) mustEmbedUnimplementedFactorialServiceServer() {}

// UnsafeFactorialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorialServiceServer will
// result in compilation errors.
type UnsafeFactorialServiceServer interface {
	mustEmbedUnimplementedFactorialServiceServer()
}

func RegisterFactorialServiceServer(s grpc.ServiceRegistrar, srv FactorialServiceServer) {
	s.RegisterService(&FactorialService_ServiceDesc, srv)
}

func _FactorialService_FindFactorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFactorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorialServiceServer).FindFactorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FactorialService/FindFactorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorialServiceServer).FindFactorial(ctx, req.(*FindFactorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FactorialService_ServiceDesc is the grpc.ServiceDesc for FactorialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FactorialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FactorialService",
	HandlerType: (*FactorialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindFactorial",
			Handler:    _FactorialService_FindFactorial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
